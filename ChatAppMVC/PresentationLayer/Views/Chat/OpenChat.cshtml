<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat Interface</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.1.3/css/bootstrap.min.css" />
    <style>
        body {
            font-family: Arial, Gotham;
            background-color: #f5f5f5;
        }

        .chat-container {
            width: 100%;
            max-width: 600px;
            margin: 20px auto;
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            overflow: hidden;
        }

        .chat-header {
            display: flex;
            align-items: center;
            padding: 10px;
            background-color: #007bff;
            color: white;
        }

            .chat-header img {
                border-radius: 50%;
                width: 40px;
                height: 40px;
                margin-right: 10px;
            }

        .chat-body {
            max-height: 400px;
            overflow-y: auto;
            padding: 15px;
            background-color: #fafafa;
        }

        .message {
            font-weight: 500;
            margin: 10px 0;
            clear: both;
        }

        .sender {
            text-align: right;
        }

        .receiver {
            text-align: left;
        }

        .message-content {
            display: inline-block;
            padding: 10px;
            border-radius: 8px;
            max-width: 75%;
            word-wrap: break-word;
        }

        .sender .message-content {
            background-color: #e0f7fa;
            margin-right: auto;
        }

        .receiver .message-content {
            background-color: #c8e6c9;
            margin-left: auto;
        }

        .message-image {
            display: block;
            max-width: 40%; /* Set to 40% of the container width */
            border-radius: 8px;
            margin: 5px 0; /* Space above and below */
        }

        .sender .message-image {
            margin-left: auto; /* Align image to the right */
        }

        .receiver .message-image {
            margin-right: auto; /* Align image to the left */
        }

        .message-date {
            font-size: 0.8em;
            color: #888;
        }

        .message-date {
            font-size: 0.8em;
            color: #888;
        }

        .chat-input {
            display: flex;
            padding: 10px;
            border-top: 1px solid #ddd;
            background-color: white;
        }

        .file-input {
            margin-right: 10px;
            display: flex;
            align-items: center;
        }

            .file-input input {
                display: none; /* Hide the default file input */
            }

        .file-icon {
            cursor: pointer;
            color: #007bff;
        }

        textarea {
            flex: 1;
            border: 1px solid #ccc;
            border-radius: 4px;
            padding: 10px;
            resize: none;
        }

        button {
            border: none;
            background-color: transparent;
            cursor: pointer;
            padding: 0 10px;
            color: #007bff;
        }

        .preview-image {
            max-width: 50px;
            max-height: 50px;
            border-radius: 4px;
            margin-left: 10px;
        }
    </style>
</head>
<body>
    <div class="chat-container">
        <div class="chat-header">
            <img src="/images/@Model.OtherUser.ProfilePictureUrl" alt="@Model.OtherUser.DisplayName">
            <h5>@Model.OtherUser.DisplayName</h5>
        </div>

        <div class="chat-body" id="chatBody">
            @foreach (var message in Model.Messages)
            {
                <div class="message @(message.SenderId == Model.CurrentUserId ? "sender" : "receiver")">
                    <div class="message-content">
                        @message.Content
                    </div>

                    @if (!string.IsNullOrEmpty(message.MediaUrl))
                    {
                        <div>
                            <img src="@message.MediaUrl" alt="Shared image" class="message-image">
                        </div>
                    }

                    <div class="message-date">@message.Timestamp.ToString("g")</div>
                </div>
            }
        </div>

        <div class="chat-input">
            <div class="file-input">
                <i class="fas fa-paperclip file-icon" onclick="document.getElementById('fileInput').click();"></i>
                <input type="file" id="fileInput" accept="image/*" onchange="previewImage()" />
                <img id="imagePreview" alt="Selected image" class="preview-image" style="display: none;" />
            </div>
            <textarea id="messageInput" placeholder="Type a message..." rows="1"></textarea>
            <button id="sendMessageButton"><i class="fas fa-paper-plane"></i></button>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/5.0.11/signalr.min.js"></script>
    <script>
        const chatBody = document.getElementById('chatBody');
        const messageInput = document.getElementById('messageInput');
        const fileInput = document.getElementById('fileInput');
        const sendMessageButton = document.getElementById('sendMessageButton');

        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/chathub")
            .configureLogging(signalR.LogLevel.Information)
            .build();

        const currentUserId = "@Model.CurrentUserId";
        const chatId = @Model.ChatId;

        connection.start()
            .then(() => connection.invoke("JoinChat", chatId))
            .catch(err => console.error("Error starting connection:", err));

        sendMessageButton.addEventListener('click', sendMessage);
        function previewImage() {
            const fileInput = document.getElementById('fileInput');
            const imagePreview = document.getElementById('imagePreview');

            const file = fileInput.files[0];
            if (file) {
                const reader = new FileReader();

                reader.onload = function (e) {
                    imagePreview.src = e.target.result;
                    imagePreview.style.display = 'inline';
                };

                reader.readAsDataURL(file);
            } else {
                imagePreview.src = '';
                imagePreview.style.display = 'none';
            }
        }

        async function sendMessage() {
            const messageText = messageInput.value.trim();
            const file = fileInput.files[0];

            if (messageText || file) {
                const formData = new FormData();
                formData.append("chatId", chatId);
                formData.append("senderId", currentUserId);
                formData.append("messageText", messageText);
                if (file) {
                    formData.append("file", file);
                }

                try {
                    const response = await fetch('/Message/SendMessage', {
                        method: 'POST',
                        body: formData
                    });
                    const result = await response.json();
                    if (result.success) {
                        messageInput.value = '';
                        fileInput.value = '';
                        imagePreview.src = '';
                        imagePreview.style.display = 'none';
                    }
                } catch (err) {
                    console.error("Error sending message:", err);
                }
            }
        }
        connection.on("ReceiveMessage", function (message) {
            appendMessage(message.senderId === currentUserId ? "sender" : "receiver", message.content, message.mediaUrl);
        });

        function appendMessage(type, content, mediaUrl = null) {
            const messageElement = document.createElement('div');
            messageElement.classList.add('message', type);

            const messageContent = `<div class="message-content">${content}</div><div class="message-date">${new Date().toLocaleString()}</div>`;
            messageElement.innerHTML = messageContent;
            chatBody.appendChild(messageElement);

            if (mediaUrl) {
                const imageElement = document.createElement('div');
                imageElement.classList.add('message', type);
                imageElement.innerHTML = `<img src="${mediaUrl}" alt="Shared image" class="message-image">`;
                chatBody.appendChild(imageElement);
            }

            chatBody.scrollTop = chatBody.scrollHeight;
        }
    </script>
</body>
</html>