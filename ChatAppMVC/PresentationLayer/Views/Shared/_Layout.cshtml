<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - ChatAppMVC</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/ChatAppMVC.styles.css" asp-append-version="true" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css" />
    <style>
        #notificationBadge {
            display: none;
            font-size: 12px;
            background-color: #ffc107; /* Change to warning yellow */
            color: white;
        }

        #notificationsDropdown {
            min-width: 250px;
            padding: 10px;
        }

        .notification-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
            padding: 5px;
            border-bottom: 1px solid #eee;
        }

            .notification-item:last-child {
                border-bottom: none;
            }

            .notification-item:hover {
                background-color: #f8f9fa;
            }

        .notification-content {
            font-size: 14px;
            margin-bottom: 5px;
        }

        .notification-time {
            font-size: 12px;
            color: #6c757d;
        }

        .notification-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px 15px;
            background-color: #f8f9fa;
            border-bottom: 1px solid #e9ecef;
        }

        .notification-title {
            font-weight: bold;
            margin: 0;
        }

        .mark-read-button {
            font-size: 12px;
            color: #007bff;
            background: none;
            border: none;
            cursor: pointer;
        }

            .mark-read-button:hover {
                text-decoration: underline;
            }
        #friendRequestsDropdown {
            min-width: 250px;
            padding: 10px;
        }

        .friend-request-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
            padding: 5px;
            border-bottom: 1px solid #eee;
        }

            .friend-request-item:last-child {
                border-bottom: none;
            }

        .friend-request-actions {
            display: flex;
            gap: 5px;
        }

        .Create-group{
            display: flex;
            font-display: flex;
            color:aliceblue;
            background-color: #007bff;
            border-color: wheat;
            margin-right:13px;
            font-size:15px;
            border-radius: 5px;
        }
    </style>
</head>
<body>
    <header>
        <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white border-bottom box-shadow mb-3">
            <div class="container-fluid">
                <a class="navbar-brand" asp-area="" asp-controller="Home" asp-action="Index">ChatAppMVC</a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target=".navbar-collapse" aria-controls="navbarSupportedContent"
                        aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse d-sm-inline-flex justify-content-between">
                    <ul class="navbar-nav flex-grow-1">
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-controller="Chat" asp-action="LoadChats">Home</a>
                        </li>
                        @if (User.Identity.IsAuthenticated)
                        {
                            <li class="nav-item">
                                <a class="nav-link text-dark" asp-area="" asp-controller="Auth" asp-action="Logout">Logout</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link text-dark" asp-area="" asp-controller="Home" asp-action="UserName"><b>@User.Identity.Name</b></a>
                            </li>
                        }
                        else
                        {
                            <li class="nav-item">
                                <a class="nav-link text-dark" asp-area="" asp-controller="Auth" asp-action="LoginForm">Login</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link text-dark" asp-area="" asp-controller="Auth" asp-action="RegisterForm">Register</a>
                            </li>
                        }
                    </ul>

                    @if (User.Identity.IsAuthenticated)
                    {
                        <div class="d-flex align-items-center mx-auto" style="max-width: 400px;">
                            <div class="dropdown">
                                <a href="#" class="text-dark me-3 position-relative dropdown-toggle" id="friendRequestIcon" data-bs-toggle="dropdown" aria-expanded="false">
                                    <i class="fas fa-user-plus fa-lg"></i>
                                    <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger" id="friendRequestBadge" style="display: none;">
                                        0
                                    </span>
                                </a>
                                <div id="friendRequestsDropdown" class="dropdown-menu">
                                    <div class="text-center" id="noRequestsMessage">No friend requests</div>
                                </div>
                            </div>
                            
                            <div class="dropdown">
                                <a href="#" class="text-dark me-3 position-relative dropdown-toggle" id="notificationIcon" data-bs-toggle="dropdown" aria-expanded="false">
                                    <i class="fas fa-bell fa-lg"></i>
                                    <span class="position-absolute badge rounded-pill bg-danger" id="notificationBadge" style="display: none;">
                                        0
                                    </span>
                                </a>
                                <div id="notificationsDropdown" class="dropdown-menu">
                                    <div class="notification-header">
                                        <h6 class="notification-title">Notifications</h6>
                                        <button class="mark-read-button" id="markAllRead">Mark all as read</button>
                                    </div>
                                    <div id="notificationList"></div>
                                    <div class="text-center p-2" id="noNotificationsMessage" style="display: none;">No notifications</div>
                                </div>
                            </div>

                                <form asp-action="CreateGroup" asp-controller="Chat" method="get">
                                    <button class="Create-group" type="submit">Create Group</button>
                                </form>

                            <form class="d-flex" role="search" asp-action="Search" asp-controller="User">
                                <input class="form-control me-2" id="username" name="username" type="search" placeholder="Search" aria-label="Search">
                                <button class="btn btn-outline-success" type="submit">Search</button>
                            </form>
                        </div>
                    }
                </div>
            </div>
        </nav>
    </header>

    <div class="container">
        <main role="main" class="pb-3">
            @RenderBody()
        </main>
    </div>


    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/5.0.11/signalr.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>

    <script>
        $(document).ready(function () {
            let isDropdownOpen = false;
            let notificationCount = 0;

            const friendRequestConnection = new signalR.HubConnectionBuilder()
                .withUrl("/friendRequestHub")
                .withAutomaticReconnect()
                .build();

            const notificationConnection = new signalR.HubConnectionBuilder()
                .withUrl("/notificationHub")
                .withAutomaticReconnect()
                .build();

            friendRequestConnection.start().then(() => {
                console.log("FriendRequest SignalR connected!");
                fetchFriendRequests();
            }).catch(err => console.error(err));

            notificationConnection.start().then(() => {
                console.log("Notification SignalR connected!");
                fetchNotifications();
            }).catch(err => console.error(err));

            friendRequestConnection.on("ReceiveFriendRequest", function () {
                toastr.info("You received a new friend request!");
                fetchFriendRequests();
            });

            notificationConnection.on("ReceiveNotification", function (notification) {
                toastr.info(notification.content);
                fetchNotifications();
            });

            function startSignalRConnections() {
                friendRequestConnection.start()
                    .then(() => {
                        console.log("FriendRequest SignalR Connected");
                        fetchFriendRequests();
                    })
                    .catch(err => {
                        console.error("FriendRequest SignalR Connection Error: ", err);
                        setTimeout(() => startSignalRConnections(), 5000);
                    });

                notificationConnection.start()
                    .then(() => {
                        console.log("Notification SignalR Connected");
                        fetchNotifications();
                    })
                    .catch(err => {
                        console.error("Notification SignalR Connection Error: ", err);
                        setTimeout(() => startSignalRConnections(), 5000);
                    });
            }

            friendRequestConnection.onclose(() => {
                console.log("FriendRequest SignalR Disconnected");
                setTimeout(() => startSignalRConnections(), 5000);
            });

            notificationConnection.onclose(() => {
                console.log("Notification SignalR Disconnected");
                setTimeout(() => startSignalRConnections(), 5000);
            });

            startSignalRConnections();


            function fetchNotifications() {
                $.ajax({
                    url: '/Notification/GetUserNotifications',
                    type: 'GET',
                    success: function (data) {
                        $('#notificationList').empty();
                        notificationCount = 0;

                        if (data.notifications && data.notifications.length > 0) {
                            $('#noNotificationsMessage').hide();
                            data.notifications.forEach(notification => {
                                const content = notification.content || 'No content';
                                let dateString = 'Unknown date';

                                if (notification.createdAt) {
                                    const date = new Date(notification.createdAt);
                                    if (!isNaN(date.getTime())) {
                                        dateString = date.toLocaleString();
                                    }
                                }

                                const notificationItem = `
                                    <div class="notification-item">
                                                <div class="notification-content"><b>${content}</b></div>
                                                        <div class="notification-time"><b>${dateString}</b></div>
                                    </div>
                                `;
                                $('#notificationList').append(notificationItem);
                                notificationCount++;
                            });

                            updateNotificationBadge();
                        } else {
                            $('#noNotificationsMessage').show();
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error('Error fetching notifications:', error);
                        toastr.error("Failed to fetch notifications. Please try again later.");
                    }
                });
            }

            function updateNotificationBadge() {
                if (notificationCount > 0) {
                    $('#notificationBadge').show().text(notificationCount);
                } else {
                    $('#notificationBadge').hide();
                }
            }

            $('#markAllRead').click(function (e) {
                e.preventDefault();
                e.stopPropagation();
                $.ajax({
                    url: '/Notification/MarkAllAsRead',
                    type: 'POST',
                    success: function (response) {
                        if (response.success) {
                            notificationCount = 0;
                            updateNotificationBadge();
                        } else {
                            toastr.error("Failed to mark notifications as read");
                        }
                    },
                    error: function () {
                        toastr.error("Error marking notifications as read");
                    }
                });
            });

            $('#notificationIcon').click(function () {
                if (notificationCount > 0) {
                    notificationCount = Math.min(notificationCount, 3);
                    updateNotificationBadge();
                }
            });

            fetchNotifications();
            setInterval(fetchNotifications, 60000);

            function fetchFriendRequests() {
                $.ajax({
                    url: '/FriendRequest/GetReceivedFriendRequests',
                    type: 'GET',
                    success: function (data) {
                        $('#friendRequestsDropdown').empty();
                        $('#friendRequestBadge').hide();

                        if (data.requests && data.requests.length > 0) {
                            $('#noRequestsMessage').hide();
                            data.requests.forEach(request => {
                                const requestItem = `
                                    <div class="friend-request-item" data-sender-id="${request.senderId}" data-request-id="${request.id}">
                                        <span>${request.senderName} sent you a friend request</span>
                                        <div class="friend-request-actions">
                                            <button class="btn btn-success accept-request">Accept</button>
                                            <button class="btn btn-danger reject-request">Reject</button>
                                        </div>
                                    </div>
                                `;
                                $('#friendRequestsDropdown').append(requestItem);
                            });

                            $('#friendRequestBadge').show().text(data.requests.length);
                        } else {
                            $('#noRequestsMessage').show();
                        }
                    },
                    error: function () {
                        toastr.error("Failed to fetch friend requests.");
                    }
                });
            }

            $('#friendRequestsDropdown').on('click', '.accept-request', function () {
                const $item = $(this).closest('.friend-request-item');
                const senderId = $item.data('sender-id');
                const requestId = $item.data('request-id');
                acceptFriendRequest(senderId, requestId);
            });

            $('#friendRequestsDropdown').on('click', '.reject-request', function () {
                const $item = $(this).closest('.friend-request-item');
                const senderId = $item.data('sender-id');
                const requestId = $item.data('request-id');
                rejectFriendRequest(senderId, requestId);
            });

            function acceptFriendRequest(senderId, requestId) {
                $.ajax({
                    url: '/FriendRequest/Accept',
                    type: 'POST',
                    data: {
                        senderId: senderId,
                        requestId: requestId
                    },
                    headers: {
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function (response) {
                        if (response.success) {
                            toastr.success(response.message);
                            fetchFriendRequests();
                        } else {
                            toastr.error(response.message);
                        }
                    },
                    error: function () {
                        toastr.error("Error accepting friend request.");
                    }
                });
            }

            function rejectFriendRequest(senderId, requestId) {
                $.ajax({
                    url: '/FriendRequest/Reject',
                    type: 'POST',
                    data: {
                        senderId: senderId,
                        requestId: requestId
                    },
                    headers: {
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function (response) {
                        if (response.success) {
                            toastr.success(response.message);
                            fetchFriendRequests();
                        } else {
                            toastr.error(response.message);
                        }
                    },
                    error: function () {
                        toastr.error("Error rejecting friend request.");
                    }
                });
            }
        });
    </script>
</body>
</html>
